# Generated by Django 2.2.6 on 2019-12-06 17:25

from django.db import migrations


def update_pairs(schedule):
    pairs_by_id = {}
    pair_index = 0
    for sch in schedule:
        player_id, partner_id, pidx = sch.player.id, sch.partner.id, sch.pair_index
        if pidx > -1:
            pairs_by_id[player_id] = pidx
            pairs_by_id[partner_id] = pidx
        else:
            if player_id in pairs_by_id:
                sch.pair_index = pairs_by_id[player_id]
                sch.save()
                pairs_by_id[partner_id] = pairs_by_id[player_id]
                print(f"Updated {player_id} to {pair_index}")
            elif partner_id in pairs_by_id:
                sch.pair_index = pairs_by_id[partner_id]
                sch.save()
                pairs_by_id[player_id] = pairs_by_id[partner_id]
            else:
                # Add the value to both
                pairs_by_id[player_id] = pair_index
                pairs_by_id[partner_id] = pair_index
                print(f"set {player_id} and {partner_id} to index {pair_index}")
                sch.pair_index = pair_index
                sch.save()
                pair_index += 1


def calculate_pair_index(apps, schema_editor):
    Schedule = apps.get_model('blockdb', 'Schedule')
    meetings = Schedule.objects.distinct().values_list('meeting', flat=True).order_by('meeting')
    for meeting_id in meetings:
        schedule = Schedule.objects.filter(meeting=meeting_id).order_by('player__id')
        update_pairs(schedule)


def clear_pair_index(apps, schema_editor):
    Schedule = apps.get_model('blockdb', 'Schedule')

    Schedule.objects.update(pair_index=-1)


class Migration(migrations.Migration):

    dependencies = [
        ('blockdb', '0027_schedule_pair_index'),
    ]

    operations = [
        migrations.RunPython(calculate_pair_index, reverse_code=clear_pair_index)
    ]
