version: 2.0

references:

  container_config: &container_config
    working_directory: ~/components
    docker:
      - image: bigzeta/circleci_node:1.1.0

  workspace_root: &workspace_root
    ~/components

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

  restore_repo: &restore_repo
    restore_cache:
      keys:
        - v1-repo-{{ .Branch }}-{{ .Revision }}
        - v1-repo-{{ .Branch }}
        - v1-repo

  gen_node_key: &gen_node_key
    run:
      name: combine packages for key generation
      command: |
        cat package.json > combined_package.json

  restore_modules: &restore_modules
    restore_cache:
      keys:
        - v1-package-{{ checksum "combined_package.json" }}

jobs:
  checkout_code:
    <<: *container_config
    steps:
      - *restore_repo

      - run:
          name: Avoid hosts unknown for github
          command: |
            mkdir ~/.ssh/
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config

      - run:
          name: Fix the crap in the circleci checkout.sh script
          command: |
            if [ -n "${CIRCLE_TAG}" ]
            then
              git fetch --force origin "refs/tags/${CIRCLE_TAG}:refs/tags/${CIRCLE_TAG}"
            fi

      - checkout

      - run:
          name: fetch tags
          command: |
            git fetch --tags || true

      - checkout

      - save_cache:
          key: v1-repo-{{ .Branch }}-{{ .Revision }}
          paths:
            - .

  install_packages:
    <<: *container_config
    steps:
      - *restore_repo

      - *gen_node_key

      - store_artifacts:
          path: ./combined_package.json
          destination: combined_pacakge.json

      - *restore_modules

      - run:
          name: Install node modules
          command: |
            pwd
            ls -al /usr/local/bin/yarn
            ls -al $(readlink -f $(which yarn))
            ls -al .
            yarn install

      # Save bootstrap cache
      # I don't know if a cleaner way to cache all of these packages.
      - save_cache:
          key: v1-package-{{ checksum "combined_package.json" }}
          paths:
            - ./node_modules

  webpack:
    <<: *container_config
    steps:
      - *restore_repo
      - *gen_node_key
      - *restore_modules
      - *attach_workspace

      - run:
          name: Compile the project
          command: |
            pwd
            yarn compile:prod

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - ./dist.prod

  test:
    <<: *container_config
    steps:
      - *restore_repo
      - *gen_node_key
      - *restore_modules
      - *attach_workspace

      - run:
          name: test
          command: yarn test

  # This should only run on tagged branches
  deploy_to_s3:
    <<: *container_config
    steps:
      - *attach_workspace

      - run:
          name: Publish tag ${CIRCLE_TAG} to S3
          command: |
            if [[ "${CIRCLE_TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]
            then
              export STAGE=prod
            else
              export STAGE=stage
            fi

            export SRC=./dist.prod
            export DEST=s3://${S3_DEPLOY_BUCKET}/${S3_DEPLOY_PATH}/${STAGE}/${CIRCLE_TAG}/
            aws s3 sync ${SRC} ${DEST} \
              --exclude '*.map' \
              --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers

  deploy_to_sentry:
    <<: *container_config
    steps:
      - *attach_workspace

      - run:
          name: Upload source maps to Sentry
          command: |
            export SENTRY_ORG=bigzeta-llc
            if [[ "${CIRCLE_TAG}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]
            then
              export STAGE=prod
              export SENTRY_PROJECT=datapages-components
              export PREFIX=https://demo.datapages.io
            else
              export STAGE=stage
              export SENTRY_PROJECT=datapages-components-stage
              export PREFIX=https://demo.datapages.io
            fi
            export VERSION=`sentry-cli releases propose-version`
            echo "Proposed version is ${VERSION}"

            echo "Create a new release version"
            sentry-cli releases new "${CIRCLE_TAG}"

            echo "Upload javascript files to the release"
            for file in `ls dist.prod/js/*.js`
            do
              base=`basename $file`
              echo "Uploading $file with base ${base}"
              sentry-cli releases files "${CIRCLE_TAG:-test_tag}" upload $file \
                https://cdn.datapages.io/${STAGE}/${CIRCLE_TAG}/js/${base}
            done

            echo "Uploading source maps"
            sentry-cli releases files "${CIRCLE_TAG:-test_tag}" upload-sourcemaps dist.prod/js/*.map

            sentry-cli releases finalize "${CIRCLE_TAG}"

          environment:
            SENTRY_ORG: bigzeta-llc

workflows:
  version: 2

  build_and_test:
    jobs:
      - checkout_code:
          filters:
            # Jobs never run on a tag push UNLESS we have a tags filter
            # We want to deploy on tags, so we need to insure that the jobs
            # run on tag pushes also
            tags:
              only: /.*/
            branches:
              ignore:
                - develop_ci_test

      - install_packages:
          requires:
            - checkout_code
          filters:
            tags:
              only: /.*/

      - webpack:
          requires:
            - install_packages
          filters:
            # Run only when a tag is pushed. Ignore branch only pushes
            tags:
              only: /^v.*/

      - test:
          requires:
            - webpack
          filters:
            tags:
              only: /.*/

      # These don't need filters since they depend on a task that does.
      - deploy_to_s3:
          requires:
            - test
          filters:
            # Run only when a tag is pushed. Ignore branch only pushes
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

#      - deploy_to_sentry:
#          requires:
#            - webpack
#          filters:
#            # Run only when a tag is pushed. Ignore branch only pushes
#            tags:
#              only: /^v.*/
#            branches:
#              ignore: /.*/
