#!/usr/bin/env python3
# Make modules from the list of modules in modules.json

import argparse
import json
import os
import re
import sys
from os.path import dirname, exists, join

autogen_header = """
/**
These files are autogenerated using gardenbuzz_client/scripts/make_modules.py
DO NOT EDIT THESE FILES!

Re-generate them from the command line:

cd gardenbuzz_client
python ./scripts/make_modules.py src/pages/<page name>/modules_used.json

That will re-build the ./modules directory in the page specified.

*/

"""


def build_actions(path, modules):
    exports = []
    with open(join(path, 'actions.js'), 'w') as fp:
        for module in modules:
            if module.startswith('@'):
                module = re.sub('-', '_', module[1:])
                path = module
            else:
                path = f"~/modules/{module}"

            export_name = module + "_actions"
            exports.append(export_name)
            fp.write(f"import {{ gactions as {export_name} }} from '{path}'\n")

        fp.write('\n')

        export_string = "\n".join([f"    ...{a}," for a in exports])

        fp.write(f"export const actions = {{\n{export_string}\n}}\n")


def build_selectors(path, modules):
    header = """/****
 * Globalize the selectors in the modules
 *
 * I'm looking for a more generic way to do this,
 * but basically this takes a list of all exported selectors from
 * a module and globalizes it.
 *
 * Selectors in a module are written to take the state as defined
 * in the module.
 *
 * When we use the selectors at the Component level, the component is
 * going to see the entire state tree, so a 'module' selector must
 * be globalized so that it can get the appropriate state to act on
 *
 * Here I am doing this "per module", which is a little verbose, but
 * until I get a lot of modules.. i am better doing it this way than
 * worrying about it.
 *
 * I added an improved version of this that takes care of additional
 * arguments that a selector might take. It assumes that the state is the
 * first argument, but then spreads any additional arguments onto the
 * composed globalized selector.
 */
 
"""

    with open(join(path, 'selectors.js'), 'w') as fp:
        fp.write(autogen_header)
        fp.write(header)
        fp.write("import {globalizeSelectors} from '~/utils'\n\n")
        exports = []
        for module in modules:
            if module.startswith('@'):
                module = re.sub('-', '_', module[1:])
                path = module
            else:
                path = f"~/modules/{module}"

            export_sel = module + "_selector"
            export_name = module + "_name"
            exports.append((export_sel, export_name,))
            fp.write(f"import {{ selectors as {export_sel}, NAME as {export_name} }} from '{path}'\n")

        fp.write('\n')

        fp.write("const gsel = {\n")
        for export in exports:
            s, n = export
            fp.write(f"  ...globalizeSelectors({s}, {n}),\n")
        fp.write("}\n\n")

        fp.write("export {gsel as selectors}\n\n")


def build_saga(path, modules):
    exports = []
    with open(join(path, 'sagas.js'), 'w') as fp:
        fp.write(autogen_header)
        fp.write("import { fork } from 'redux-saga/effects'\n\n")
        for module in modules:
            if module.startswith('@'):
                module = re.sub('-', '_', module[1:])
                path = module
            else:
                path = f"~/modules/{module}"

            export_name = module + "_root"
            exports.append(export_name)
            fp.write(f"import {{ rootSaga as {export_name} }} from '{path}'\n")

        fp.write('\n')

        fp.write("export function* rootSaga() {\n")
        fp.write("\n".join([f"  yield fork({a})" for a in exports]))
        fp.write("\n}\n")


def build_events_map(path, modules):
    exports = []
    with open(join(path, 'eventsMap.js'), 'w') as fp:
        fp.write(autogen_header)
        fp.write("import {mergeDeepRightAll} from '~/modules/module_utils'\n\n")
        for module in modules:
            if module.startswith('@'):
                module = re.sub('-', '_', module[1:])
                path = module
            else:
                path = f"~/modules/{module}"

            export_name = module + "_map"
            exports.append(export_name)
            fp.write(f"import {{ eventsMap as {export_name} }} from '{path}'\n")

        fp.write('\n')
        fp.write(f"export const eventsMap = mergeDeepRightAll({','.join(exports)})\n")
        fp.write("export default eventsMap\n")
        fp.write('\n')


def build_reducer(path, modules):
    exports = []
    with open(join(path, 'reducer.js'), 'w') as fp:
        fp.write(autogen_header)
        fp.write("import {combineReducers} from 'redux'\n\n")
        for module in modules:
            if module.startswith('@'):
                module = re.sub('-', '_', module[1:])
                path = module
            else:
                path = f"~/modules/{module}"

            export_reducer = module + "_reducer"
            export_name = module + "_name"
            exports.append((export_name, export_reducer,))
            fp.write(f"import {export_reducer}, {{ NAME as {export_name} }} from '{path}'\n")

        fp.write('\n')

        fp.write("export const rootReducer = combineReducers({\n")
        fp.write("\n".join([f"  [{nm}]: {red}," for nm, red in exports]))
        fp.write("\n})\n")


def build_config(path, modules):
    exports = []
    initializers = []
    with open(join(path, 'config.js'), 'w') as fp:
        fp.write(autogen_header)

        # Add Sentry
        fp.write("import * as Sentry from \'@sentry/browser\'\n\n")
        for module in modules:
            if module.startswith('@'):
                module = re.sub('-', '_', module[1:])
                path = module
            else:
                path = f"~/modules/{module}"

            config_name = f"set_config_{module}"
            init_name = f"init_{module}"
            exports.append(config_name)
            initializers.append(init_name)
            fp.write(f"import {{setConfig as {config_name} }}  from '{path}'\n")
            fp.write(f"import {{initialize as {init_name} }}  from '{path}'\n")

        fp.write('\n')

        fp.write("export const set_config = (config) =>{\n")
        fp.write("\n".join([f"  {nm}(config)" for nm in exports]))
        fp.write("\n}\n")

        fp.write("export const initialize = (options) =>{\n")
        fp.write(f"  if(options.sentry_sdk && options.sentry_sdk.dsn) {{\n")
        fp.write(f"    Sentry.init({{ dsn: options.sentry_sdk.dsn }})\n")
        fp.write(f"  }}\n")
        fp.write("\n".join([f"  {nm}(options)" for nm in initializers]))
        fp.write("\n}\n")


def build_index(path):
    with open(join(path, 'index.js'), 'w') as fp:
        fp.write(autogen_header)
        fp.write("""
import {set_connect_data, redux_connect_data} from '~/redux-page'

import {actions} from './actions'
import {selectors} from './selectors'
import {rootReducer} from './reducer'
import {rootSaga} from './sagas'
import {eventsMap} from './eventsMap'
import {set_config, initialize} from './config'
export {
  actions, 
  selectors, 
  eventsMap, 
  rootReducer, 
  rootSaga, 
  set_config, 
  initialize,
  redux_connect_data,
}

set_connect_data({selectors: selectors, actions: actions})

        """)


def get_arguments():
    parser = argparse.ArgumentParser()

    parser.add_argument('module', help='modules_used.json file to read')
    args = parser.parse_args()
    return args


def main():
    args = get_arguments()

    config_file = args.module
    if not exists(config_file):
        sys.exit("The specified module file does not exist.")

    with open(config_file, 'r') as fp:
        modules = json.load(fp)

    localdir = dirname(config_file)
    if localdir:
        os.chdir(localdir)

    os.makedirs('modules', exist_ok=True)

    build_actions('modules', modules)
    build_selectors('modules', modules)
    build_saga('modules', modules)
    build_reducer('modules', modules)
    build_config('modules', modules)
    build_events_map('modules', modules)
    build_index('modules')


if __name__ == "__main__":
    main()
